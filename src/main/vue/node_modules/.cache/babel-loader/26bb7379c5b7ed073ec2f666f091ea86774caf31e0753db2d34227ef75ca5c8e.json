{"ast":null,"code":"import { toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, normalizeStyle as _normalizeStyle, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, vShow as _vShow, withDirectives as _withDirectives, Fragment as _Fragment, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_BAlert = _resolveComponent(\"BAlert\");\n  const _component_BOverlay = _resolveComponent(\"BOverlay\");\n  const _component_Line = _resolveComponent(\"Line\");\n  const _component_BCol = _resolveComponent(\"BCol\");\n  const _component_BRow = _resolveComponent(\"BRow\");\n  const _component_BContainer = _resolveComponent(\"BContainer\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createVNode(_component_BAlert, {\n    \"model-value\": $data.retrieveResult !== '',\n    variant: $data.errmsg,\n    show: \"\"\n  }, {\n    default: _withCtx(() => [_createTextVNode(_toDisplayString($data.retrieveResult), 1)]),\n    _: 1\n  }, 8, [\"model-value\", \"variant\"]), _createVNode(_component_BOverlay, {\n    show: $data.loading,\n    variant: \"light\",\n    opacity: \"0.6\",\n    rounded: \"sm\"\n  }, null, 8, [\"show\"]), _withDirectives(_createVNode(_component_BContainer, {\n    fluid: \"\"\n  }, {\n    default: _withCtx(() => [_createVNode(_component_BRow, null, {\n      default: _withCtx(() => [_createVNode(_component_BCol, {\n        class: \"col-xxl-11\"\n      }, {\n        default: _withCtx(() => [_ctx.loaded ? (_openBlock(), _createBlock(_component_Line, {\n          key: 0,\n          options: $data.chartOptions,\n          data: $data.tempData,\n          style: _normalizeStyle($options.chartHeight)\n        }, null, 8, [\"options\", \"data\", \"style\"])) : _createCommentVNode(\"\", true)]),\n        _: 1\n      })]),\n      _: 1\n    })]),\n    _: 1\n  }, 512), [[_vShow, _ctx.showGraph]])], 64);\n}","map":{"version":3,"mappings":";;;;;;;;6DACEA,aAAiGC;IAAxF,aAAW,EAAEC,oBAAc;IAAUC,OAAO,EAAED,YAAM;IAAEE,IAAI,EAAJ;;sBAAK,MAAoB,mCAAjBF,oBAAc;;qCACrFF,aAAgFK;IAArED,IAAI,EAAEF,aAAO;IAAEC,OAAO,EAAC,OAAO;IAACG,OAAO,EAAC,KAAK;IAACC,OAAO,EAAC;yCAChEP,aAMaQ;IANDC,KAAK,EAAL;EAAK;sBACf,MAIO,CAJPT,aAIOU;wBAHL,MAEO,CAFPV,aAEOW;QAFDC,KAAK,EAAC;MAAY;0BACtB,MAAyF,CAA7EC,WAAM,kBAAlBC,aAAyFC;;UAApEC,OAAO,EAAEd,kBAAY;UAAGe,IAAI,EAAEf,cAAQ;UAAGgB,KAAK,kBAAEC,oBAAW;;;;;;;qBAH5DN,cAAS","names":["_createVNode","_component_BAlert","$data","variant","show","_component_BOverlay","opacity","rounded","_component_BContainer","fluid","_component_BRow","_component_BCol","class","_ctx","_createBlock","_component_Line","options","data","style","$options"],"sourceRoot":"","sources":["/homes/tom/Workspaces/java/tcu-monitor/src/main/vue/src/components/TcuSetup.vue"],"sourcesContent":["<template>\n  <BAlert :model-value=\"retrieveResult !== ''\" :variant=\"errmsg\" show>{{ retrieveResult }}</BAlert>\n  <BOverlay :show=\"loading\" variant=\"light\" opacity=\"0.6\" rounded=\"sm\"></BOverlay>\n  <BContainer fluid v-show=\"showGraph\">\n    <BRow>\n      <BCol class=\"col-xxl-11\">\n        <Line v-if=\"loaded\" :options=\"chartOptions\" :data=\"tempData\" :style=\"chartHeight\"></Line>\n      </BCol>\n    </BRow>\n  </BContainer>\n</template>\n\n<style>\n.text-size {\n  font-size: 18px;\n}\n</style>\n<script>\nimport 'chartjs-adapter-moment'\n\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  TimeScale\n} from 'chart.js'\n\nimport { Line } from 'vue-chartjs'\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  TimeScale\n)\n\nexport default {\n  components: {\n    Line,\n  },\n  name: 'SetupPage',\n  props: [],\n  data() {\n    return {\n      loading: false,\n      errmsg: '',\n      retrieveResult: '',\n      tcu:{name:'',ipaddress:''},\n      devices: [],\n      timers: [],\n      starttime:1577833200000,\n      graphHeight: 1.0,\n      graphSpace: 0.3,\n      devColors: ['#332655','#490099','#5d00d9','#6d00ff','#8557ff','#ffa79c','#055636','#699986','#9bc173','#ee9a00','#f86051','#00cc1a'],\n      tempData : {labels:[],datasets:[{label:'',borderColor:'#f87979',data:[]}]},\n      chartOptions: {responsive:true, maintainAspectRatio:false,\n        plugins: {\n          legend:{display:true},\n          tooltip: {\n            callbacks: {\n              label: function(context) {\n                let label = context.dataset.label || '';\n                if (label) {\n                    label += ': ';\n                }\n                if (context.parsed.y !== null) {\n                  if (context.datasetIndex === 0) { // Temperature\n                    label += (context.parsed.y * 20) + 15;\n                  } else {\n                    label += (((context.parsed.y) / (1.0 + 0.3)) - context.datasetIndex) > 0.0 ? 'on' : 'off' ;\n                  }\n                }\n                return label;\n              }\n            }\n          },\n        },\n        scales: {\n          y: {\n            type: 'linear',\n            ticks: {\n              callback:\n                function () {\n                  return '';\n                },\n              },\n            grid: {display: false,},\n          },\n          x: {\n            type: 'time',\n            time: {\n              unit: 'hour',\n              displayFormats: {\n                  hour: 'HH:mm'\n              },\n              tooltipFormat: 'HH:mm',\n              ticks: {\n                source: 'auto',\n              },\n            },\n            min: this.starttime,\n            max: this.starttime + 1440000000,\n          },\n        },\n        elements: {\n          point: {\n            pointStyle: false,\n          },\n          line: {\n            borderWidth: 1,\n          }\n        }\n      }\n    }\n  },\n  computed: {\n    chartHeight () {return {height:`${500}px`,position: 'relative'}}\n  },\n  methods: {\n    getProperties() {\n      this.loading = true;\n      this.axios.post(\"/api/command\", {\n        command: \"getProperties\",\n        data: {ipaddress:this.tcu.ipaddress}\n      })\n      .then(response => {\n        var f = response.data;\n        if (f.error !== undefined) {\n          this.errmsg = \"danger\";\n          this.retrieveResult = f.error;\n        } else {\n          this.devices = [];\n          for (var dev of f.devices) {\n            this.devices.push(dev.device);\n          }\n        }\n        this.loading = false;\n      })\n      .catch(error => {\n        this.retrieveResult = error.message;\n        this.errmsg = \"danger\";\n        this.loading = false;\n      });\n    },\n    getTimers() {\n      this.loading = true;\n      this.axios.post(\"/api/command\", {\n        command: \"getTimers\",\n        data: {ipaddress:this.tcu.ipaddress}\n      })\n      .then(response => {\n        var f = response.data;\n        if (f.error !== undefined) {\n          this.errmsg = \"danger\";\n          this.retrieveResult = f.error;\n        } else {\n          this.errmsg = \"success\";\n          this.retrieveResult = \"\";\n          console.log(f);\n          this.timers = f.timers;\n          this.loaded = false;\n          for (var i=0; i<this.devices.length; i++) {\n            this.tempData.datasets.push({label: this.devices[i], borderColor: this.devColors[i], data: Array(1441)});\n             \n          }\n          /*\n            \"device\": \"sprayer\",\n            \"hour_off\": 0,\n            \"hour_on\": 10,\n            \"index\": 1,\n            \"minute_off\": 0,\n            \"minute_on\": 5,\n            \"period\": 30,\n            \"repeat\": 1\n          */\n          for (var t of this.timers) {\n            var ix = this.getDeviceIndex(t.device);\n            var time = this.starttime + (t.hour_on * 60 + t.minute_on) * 60000;\n            var timestr = this.getTimeString(t.hour_on, t.minute_on);\n            var dix = this.getTimeIndex(this.starttime, \"2020-01-01T\" + timestr);\n            var value = (ix * (this.graphHeight + this.graphSpace)) + this.graphHeight;\n            console.log(\"on :\",ix,time,timestr,dix,value);\n            this.tempData.datasets[ix].data[dix] = {x:time, y:value};\n            if (t.period === 0) {\n              time = this.starttime + (t.hour_off * 60 + t.minute_off) * 60000;\n              timestr = this.getTimeString(t.hour_off, t.minute_off);\n            } else {\n              time += Math.ceil(t.period / 60) * 1000;\n              timestr = this.getTimeString(t.hour_on, t.minute_on + Math.ceil(t.period / 60));\n            }\n            dix = this.getTimeIndex(this.starttime, \"2020-01-01T\" + timestr);\n            value = (ix * (this.graphHeight + this.graphSpace));\n            console.log(\"off:\",ix,time,timestr,dix,value);\n            this.tempData.datasets[ix].data[dix] = {x:time, y:value};\n          }\n          console.log(this.devices);\n          // Fill in the blanks\n          for (var d=0; d<this.devices.length; d++) {\n            var lasty = 0;\n            if (this.tempData.datasets[d].data[0] !== undefined) {\n              lasty = this.tempData.datasets[d].data[0].y;\n            }\n            for (i=1; i<1441; i++) {\n              if (this.tempData.datasets[d].data[i] === undefined) {\n                this.tempData.datasets[d].data[i] = {x: this.starttime + (i * 60000), y: lasty};\n              } else {\n                lasty = this.tempData.datasets[d].data[i].y;\n              }\n            }\n          }\n          console.log(this.tempData);\n        }\n        this.loading = false;\n      })\n      .catch(error => {\n        this.retrieveResult = error.message;\n        this.errmsg = \"danger\";\n        this.loading = false;\n      });\n    },\n    getTimeString(hour, minute) {\n      var hr = (hour<10 ? \"0\" + hour.toString() : hour.toString());\n      return hr + \":\" + (minute<10 ? \"0\" + minute.toString() : minute.toString()) + \":00\";\n    },\n    getDeviceIndex(dev) {\n      var ix = -1;\n      for (var i=0; i<this.devices.length; i++) {\n        if(dev === this.devices[i]) {\n          ix = i;\n          break;\n        }\n      }\n      return ix;\n    },\n    /*\n    params:\n      time: datetime-string e.g. \"2023-07-05T16:14:02\"\n    return:\n      datetime in milliseconds since 1/1/70, rounded to minutes\n    */\n    getMinutes(time) { // \n      var t = Date.parse(time);\n      return Math.floor(t / 60000) * 60000;\n    },\n    /*\n    params:\n      timeStart: datetime in milliseconds since 1/1/70, rounded to minutes\n      thisTime:  datetime-string e.g. \"2020-01-01T16:14:02\"\n    return:\n      minutes gone by since timeStart\n    */\n    getTimeIndex(timeStart, thisTime) {\n      var tn = this.getMinutes(thisTime);\n      return (tn - timeStart) / 60000;\n    }\n  },\n  watch: {\n  },\n  mounted() {\n    this.emitter.on('newtcu', tcu => {\n        console.log(\"TcuSetup page received 'newtcu' message: \", tcu);\n        this.tcu = tcu;\n        this.getProperties();\n        this.getTimers();\n      }\n    );\n  }\n}\n\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}