{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, normalizeStyle as _normalizeStyle, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, vShow as _vShow, withDirectives as _withDirectives, Fragment as _Fragment, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_BFormSelect = _resolveComponent(\"BFormSelect\");\n  const _component_BFormGroup = _resolveComponent(\"BFormGroup\");\n  const _component_Line = _resolveComponent(\"Line\");\n  const _component_BCol = _resolveComponent(\"BCol\");\n  const _component_BRow = _resolveComponent(\"BRow\");\n  const _component_BContainer = _resolveComponent(\"BContainer\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createVNode(_component_BFormGroup, {\n    \"label-cols-sm\": \"5\",\n    \"label-align-sm\": \"end\",\n    label: \"Kies een dag:\",\n    \"label-for\": \"input-2\",\n    \"content-cols-sm\": \"2\",\n    class: \"text-size\"\n  }, {\n    default: _withCtx(() => [_createVNode(_component_BFormSelect, {\n      id: \"input-2\",\n      modelValue: $data.day,\n      \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.day = $event),\n      options: $data.fileNames,\n      class: \"text-size\"\n    }, null, 8, [\"modelValue\", \"options\"])]),\n    _: 1\n  }), _withDirectives(_createVNode(_component_BContainer, {\n    fluid: \"\"\n  }, {\n    default: _withCtx(() => [_createVNode(_component_BRow, null, {\n      default: _withCtx(() => [_createVNode(_component_BCol, {\n        class: \"col-xxl-11\"\n      }, {\n        default: _withCtx(() => [$data.loaded ? (_openBlock(), _createBlock(_component_Line, {\n          key: 0,\n          options: $data.chartOptions,\n          data: $data.tempData,\n          style: _normalizeStyle($options.chartHeight)\n        }, null, 8, [\"options\", \"data\", \"style\"])) : _createCommentVNode(\"\", true)]),\n        _: 1\n      })]),\n      _: 1\n    })]),\n    _: 1\n  }, 512), [[_vShow, $data.showGraph]])], 64);\n}","map":{"version":3,"mappings":";;;;;;;;6DACEA,aAEaC;IAFD,eAAa,EAAC,GAAG;IAAC,gBAAc,EAAC,KAAK;IAACC,KAAK,EAAC,eAAe;IAAC,WAAS,EAAC,SAAS;IAAC,iBAAe,EAAC,GAAG;IAACC,KAAK,EAAC;;sBACrH,MAA6F,CAA7FH,aAA6FI;MAAhFC,EAAE,EAAC,SAAS;kBAAUC,SAAG;iEAAHA,SAAG;MAAGC,OAAO,EAAED,eAAS;MAAEH,KAAK,EAAC;;;sBAErEH,aAMaQ;IANDC,KAAK,EAAL;EAAK;sBACf,MAIO,CAJPT,aAIOU;wBAHL,MAEO,CAFPV,aAEOW;QAFDR,KAAK,EAAC;MAAY;0BACtB,MAAyF,CAA7EG,YAAM,kBAAlBM,aAAyFC;;UAApEN,OAAO,EAAED,kBAAY;UAAGQ,IAAI,EAAER,cAAQ;UAAGS,KAAK,kBAAEC,oBAAW;;;;;;;qBAH5DV,eAAS","names":["_createVNode","_component_BFormGroup","label","class","_component_BFormSelect","id","$data","options","_component_BContainer","fluid","_component_BRow","_component_BCol","_createBlock","_component_Line","data","style","$options"],"sourceRoot":"","sources":["/homes/tom/Workspaces/java/tcu-monitor/src/main/vue/src/components/Graphs.vue"],"sourcesContent":["<template>\n  <BFormGroup label-cols-sm=\"5\" label-align-sm=\"end\" label=\"Kies een dag:\" label-for=\"input-2\" content-cols-sm=\"2\" class=\"text-size\">\n    <BFormSelect id=\"input-2\" v-model=\"day\" :options=\"fileNames\" class=\"text-size\"></BFormSelect>\n  </BFormGroup>\n  <BContainer fluid v-show=\"showGraph\">\n    <BRow>\n      <BCol class=\"col-xxl-11\">\n        <Line v-if=\"loaded\" :options=\"chartOptions\" :data=\"tempData\" :style=\"chartHeight\"></Line>\n      </BCol>\n    </BRow>\n  </BContainer>\n</template>\n\n<style>\n</style>\n\n<script>\nimport 'chartjs-adapter-moment'\n\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  TimeScale\n} from 'chart.js'\n\nimport { Line } from 'vue-chartjs'\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  TimeScale\n)\n\nexport default {\n  components: {\n    Line\n  },\n  name: 'HomePage',\n  props: ['showPage'],\n  data() {\n    return {\n      loading: false,\n      errmsg: '',\n      retrieveResult: '',\n      showDay: false,\n      showGraph: false,\n      tcu:{name:'',ipaddress:''},\n      devices:[],\n      search: '',\n      fileNames:[],\n      day: '',\n      loaded: false,\n      starttime: 0,\n      stoptime: 0,\n      graphHeight: 1.0,\n      graphSpace: 0.3,\n      devColors: ['#332655','#490099','#5d00d9','#6d00ff','#8557ff','#ffa79c','#055636','#699986','#9bc173','#ee9a00','#f86051','#00cc1a'],\n      tempData : {labels:[],datasets:[{label:'',borderColor:'#f87979',data:[]}]},\n      chartOptions: {responsive:true, maintainAspectRatio:false,\n        plugins: {\n          legend:{display:true},\n          tooltip: {\n            callbacks: {\n              label: function(context) {\n                let label = context.dataset.label || '';\n                if (label) {\n                    label += ': ';\n                }\n                if (context.parsed.y !== null) {\n                  if (context.datasetIndex === 0) { // Temperature\n                    label += (context.parsed.y * 20) + 15;\n                  } else {\n                    label += (((context.parsed.y) / (1.0 + 0.3)) - context.datasetIndex) > 0.0 ? 'on' : 'off' ;\n                    let bytext = context.dataset.data[context.dataIndex].by;\n                    if (bytext.length > 0) {\n                      label += ' by: ' + context.dataset.data[context.dataIndex].by;\n                    }\n                  }\n                }\n                return label;\n              }\n            }\n          },\n        },\n        scales: {\n          y: {\n            type: 'linear',\n            ticks: {\n              callback:\n                function () {\n                  return '';\n                },\n              },\n            grid: {display: false,},\n          },\n          x: {\n            type: 'time',\n            time: {\n              unit: 'hour',\n              displayFormats: {\n                  hour: 'HH:mm'\n              },\n              tooltipFormat: 'HH:mm',\n              ticks: {\n                source: 'auto',\n              },\n            },\n            min: this.starttime,\n            max: this.starttime + 1440000000,\n          },\n        },\n        elements: {\n          point: {\n            pointStyle: false,\n          },\n          line: {\n            borderWidth: 1,\n          }\n        }\n      }\n    }\n  },\n  computed: {\n    chartHeight () {return {height:`${500}px`,position: 'relative'}}\n  },\n  methods: {\n    getProperties() {\n      this.loading = true;\n      this.axios.post(\"/api/command\", {\n        command: \"getProperties\",\n        data: {ipaddress:this.tcu.ipaddress}\n      })\n      .then(response => {\n        var f = response.data;\n        if (f.error !== undefined) {\n          this.errmsg = \"danger\";\n          this.retrieveResult = f.error;\n        } else {\n          this.devices = [];\n          for (var dev of f.devices) {\n            this.devices.push(dev.device);\n          }\n        }\n        this.loading = false;\n      })\n      .catch(error => {\n        this.retrieveResult = error.message;\n        this.errmsg = \"danger\";\n        this.loading = false;\n      });\n    },\n    getHistDataFiles() {\n      this.loading = true;\n      this.axios.post(\"/api/command\", {\n        command: \"getHistDataFiles\",\n        data: {ipaddress:this.tcu.ipaddress}\n      })\n      .then(response => {\n        var f = response.data;\n        if (f.error !== undefined) {\n          this.errmsg = \"danger\";\n          this.retrieveResult = f.error;\n        } else {\n          this.fileNames = [];\n          for (var nm of f.files) {\n            this.fileNames.push(String(nm).replace(\"temp_\",\"\"));\n          }\n        }\n        this.loading = false;\n      })\n      .catch(error => {\n        this.retrieveResult = error.message;\n        this.errmsg = \"danger\";\n        this.loading = false;\n      });\n    },\n    getTempDataFile(day) {\n      this.loaded = false;\n      this.loading = true;\n      this.axios.post(\"/api/command\", {\n        command: \"getTempDataFile\",\n        data: {ipaddress:this.tcu.ipaddress, file:'temp_' + day}\n      })\n      .then(response => {\n        var f = response.data;\n        if (f.error !== undefined) {\n          this.errmsg = \"danger\";\n          this.retrieveResult = f.error;\n        } else {\n          this.errmsg = \"success\";\n          this.retrieveResult = \"\";\n          this.cvtTempData(f.content);\n          this.getStateDataFile(day);\n        }\n        this.loading = false;\n      })\n      .catch(error => {\n        this.retrieveResult = error.message;\n        this.errmsg = \"danger\";\n        this.loading = false;\n      });\n    },\n    cvtTempData(raw) {\n/*\n2023-07-05 14:00:00 start\n2023-07-05 14:00:02 r=0 t=0\n...\n2023-07-06 13:59:03 r=0 t=0\n2023-07-06 14:00:03 r=0 t=0\n2023-07-06 14:00:02 stop\n*/\n      this.tempData.datasets=[];\n      this.tempData.datasets.push({label:'Temperature',borderColor : '#f87979', data: []});\n      var lines = String(raw).split(\"\\n\");\n      for (var l of lines) {\n        var parts = String(l).split(\" \");\n        if (parts.length === 3) {\n          if (parts[2] === \"start\") {\n            this.starttime = this.getMinutes(parts[0] + \"T\" + parts[1]);\n          } else {\n            this.stoptime = this.getMinutes(parts[0] + \"T\" + parts[1]);\n          }\n        } else if (parts.length > 3) {\n          var temp =  Number(String(parts[3]).split(\"=\")[1]); // terrarium temperature\n          if (temp === 0) temp = 26.0;\n          temp = (temp - 15.0) * this.graphHeight / (35.0 - 15.0);\n          var time = this.getMinutes(parts[0] + \"T\" + parts[1]);\n          this.tempData.datasets[0].data.push({x:time, y:temp});\n        }\n      }\n    },\n    getStateDataFile(day) {\n      this.loading = true;\n      this.axios.post(\"/api/command\", {\n        command: \"getStateDataFile\",\n        data: {ipaddress:this.tcu.ipaddress, file:'state_' + day}\n      })\n      .then(response => {\n        var f = response.data;\n        if (f.error !== undefined) {\n          this.errmsg = \"danger\";\n          this.retrieveResult = f.error;\n        } else {\n          this.errmsg = \"success\";\n          this.retrieveResult = \"\";\n          this.cvtStateData(f.content);\n        }\n        this.loading = false;\n      })\n      .catch(error => {\n        this.retrieveResult = error.message;\n        this.errmsg = \"danger\";\n        this.loading = false;\n      });\n    },\n    cvtStateData(raw) {\n/*\ndate       time     device endtime controlled by (0: free, 1-5: temp rule, -1: sprayer rule, -2: mist rule, -3: timer)\n------------------------------\n2023-08-01 00:00:00 light6 1 4\n2023-08-01 00:00:00 pump 0 4\n2023-08-01 00:00:00 sprayer 0 4\n2023-08-01 00:00:00 mist 0 4\n2023-08-01 00:00:00 fan_in 0 4\n2023-08-01 00:00:00 fan_out 0 4\n2023-08-01 00:00:00 spare 0 4\n2023-08-01 06:00:02 mist 1 -1 -3\n2023-08-01 06:00:02 fan_in 0 -2\n2023-08-01 06:00:02 fan_out 0 -2\n2023-08-01 06:45:02 mist 0 0\n2023-08-01 06:45:02 fan_in 0 0\n2023-08-01 06:45:02 fan_out 0 0\n2023-08-01 09:00:02 light1 1 -1 -3\n2023-08-01 09:00:02 light6 0 0\n2023-08-01 09:30:02 light2 1 -1 -3\n2023-08-01 10:00:02 light3 1 -1 -3\n2023-08-01 10:05:02 sprayer 1 10:05:32 -3\n2023-08-01 10:05:02 fan_in 0 -1\n2023-08-01 10:05:02 fan_out 0 -1\n2023-08-01 10:05:32 sprayer 0 0\n2023-08-01 10:15:02 light4 1 -1 -3\n2023-08-01 10:20:02 fan_in 1 10:35:02 -1\n2023-08-01 10:20:02 fan_out 1 10:35:02 -1\n2023-08-01 10:35:02 fan_in 0 0\n2023-08-01 10:35:02 fan_out 0 0\n2023-08-01 10:37:02 fan_in 1 -2 5\n*/\n      this.loaded = false;\n      for (var i=1; i<=this.devices.length; i++) {\n        this.tempData.datasets.push({label: this.devices[i-1], borderColor: this.devColors[i-1], data: Array(1441)});\n      }\n      var lines = String(raw).split(\"\\n\");\n      for (var l of lines) {\n        var parts = String(l).split(\" \");\n        if (parts.length > 3) {\n          var ix = this.getDeviceIndex(parts[2]) + 1;\n          if (ix !== 0) {\n            var time = this.getMinutes(parts[0] + \"T\" + parts[1]); // in milliseconds\n            var value = (ix * (this.graphHeight + this.graphSpace)) + (Number(parts[3]) * this.graphHeight); // 0.0 => 2.0\n            var dix = this.getTimeIndex(this.starttime, parts[0] + \"T\" + parts[1]);\n            if (parts.length == 6) {\n              var bytext = this.cvtControlledBy(Number(parts[5]));\n              this.tempData.datasets[ix].data[dix] = {x:time, y:value, by:bytext};\n            } else {\n              this.tempData.datasets[ix].data[dix] = {x:time, y:value, by:''};\n            }\n          }\n        }\n      }\n      // Fill in the blanks\n      for (var d=1; d<=this.devices.length; d++) {\n        var lasty = this.tempData.datasets[d].data[0].y;\n        var lastby = this.tempData.datasets[d].data[0].by;\n        for (i=1; i<1441; i++) {\n          if (this.tempData.datasets[d].data[i] === undefined) {\n            this.tempData.datasets[d].data[i] = {x: this.starttime + (i * 60000), y: lasty, by: lastby};\n          } else {\n            lasty = this.tempData.datasets[d].data[i].y;\n            lastby = this.tempData.datasets[d].data[i].by;\n          }\n        }\n      }\n      this.loaded = true;\n    },\n    cvtControlledBy(by) {\n      if (by > 0) {\n        return 'Temp rule ' + by;\n      } else if (by == -1) {\n        return 'Sprayer rule'\n      } else if (by == -2) {\n        return 'Mist rule'\n      } else if (by == -3) {\n        return 'Timer'\n      }\n      return by;\n    },\n    getDeviceIndex(dev) {\n      var ix = -1;\n      for (var i=0; i<this.devices.length; i++) {\n        if(dev === this.devices[i]) {\n          ix = i;\n          break;\n        }\n      }\n      return ix;\n    },\n    /*\n    params:\n      time: datetime-string e.g. \"2023-07-05T16:14:02\"\n    return:\n      datetime in milliseconds since 1/1/70, rounded to minutes\n    */\n    getMinutes(time) { // \n      var t = Date.parse(time);\n      return Math.floor(t / 60000) * 60000;\n    },\n    /*\n    params:\n      timeStart: datetime in milliseconds since 1/1/70, rounded to minutes\n      thisTime:  datetime-string e.g. \"2023-07-05T16:14:02\"\n    return:\n      minutes gone by since timeStart (=0)\n    */\n    getTimeIndex(timeStart, thisTime) {\n      var tn = this.getMinutes(thisTime);\n      return (tn - timeStart) / 60000;\n    }\n  },\n  watch: {\n    day(newValue) {\n      if (newValue != '') {\n        this.getTempDataFile(newValue);\n        this.showGraph = true;\n      }\n    }\n  },\n  mounted() {\n    this.emitter.on('newtcu', tcu => {\n        console.log(\"Graphs page received 'newtcu' message: \", tcu);\n        this.tcu = tcu;\n        this.showDay = false;\n        this.showGraph = false;\n        this.getProperties();\n        this.getHistDataFiles();\n      }\n    );\n    this.showDay = false;\n    this.showGraph = false;\n  },\n}\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}