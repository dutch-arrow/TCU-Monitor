import type { Booleanish, Breakpoint, BTableProvider, BTableSortCompare, TableField, TableFieldObject, TableItem, VerticalAlign } from '../../types';
type NoProviderTypes = 'paging' | 'sorting' | 'filtering';
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    small: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    filter: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    dark: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    caption: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    align: {
        type: import("vue").PropType<VerticalAlign>;
        default: undefined;
    };
    variant: {
        type: import("vue").PropType<keyof import("../../types").BaseColorVariant | null>;
        default: undefined;
    };
    items: {
        type: import("vue").PropType<TableItem[]>;
        default: () => never[];
    };
    borderVariant: {
        type: import("vue").PropType<keyof import("../../types").BaseColorVariant | null>;
        default: undefined;
    };
    stacked: {
        type: import("vue").PropType<boolean | Breakpoint>;
        default: boolean;
    };
    busy: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    perPage: {
        type: import("vue").PropType<number>;
        default: undefined;
    };
    bordered: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    borderless: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    captionTop: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    hover: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    responsive: {
        type: import("vue").PropType<boolean | Breakpoint>;
        default: boolean;
    };
    striped: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    stickyHeader: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    fields: {
        type: import("vue").PropType<TableField[]>;
        default: () => never[];
    };
    footClone: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    provider: {
        type: import("vue").PropType<BTableProvider>;
        default: undefined;
    };
    sortCompare: {
        type: import("vue").PropType<BTableSortCompare>;
        default: undefined;
    };
    noProvider: {
        type: import("vue").PropType<NoProviderTypes[]>;
        default: undefined;
    };
    noProviderPaging: {
        type: import("vue").PropType<Booleanish>;
        default: undefined;
    };
    noProviderSorting: {
        type: import("vue").PropType<Booleanish>;
        default: undefined;
    };
    noProviderFiltering: {
        type: import("vue").PropType<Booleanish>;
        default: undefined;
    };
    labelStacked: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    sortBy: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    sortDesc: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    sortInternal: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    selectable: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    stickySelect: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    selectHead: {
        type: import("vue").PropType<string | boolean>;
        default: boolean;
    };
    selectMode: {
        type: import("vue").PropType<"range" | "single" | "multi">;
        default: string;
    };
    selectionVariant: {
        type: import("vue").PropType<keyof import("../../types").BaseColorVariant | null>;
        default: string;
    };
    showEmpty: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    currentPage: {
        type: import("vue").PropType<number>;
        default: number;
    };
    filterable: {
        type: import("vue").PropType<string[]>;
        default: undefined;
    };
    emptyText: {
        type: import("vue").PropType<string>;
        default: string;
    };
    emptyFilteredText: {
        type: import("vue").PropType<string>;
        default: string;
    };
}, {
    selectAllRows: () => void;
    clearSelected: () => void;
    selectRow: (index: number) => void;
    unselectRow: (index: number) => void;
    refresh: () => Promise<TableItem[] | undefined>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    headClicked: (key: import("../../types").LiteralUnion<string>, field: TableField, event: MouseEvent, isFooter: boolean) => void;
    rowClicked: (item: TableItem, index: number, event: MouseEvent) => void;
    rowDblClicked: (item: TableItem, index: number, event: MouseEvent) => void;
    rowHovered: (item: TableItem, index: number, event: MouseEvent) => void;
    rowUnhovered: (item: TableItem, index: number, event: MouseEvent) => void;
    rowSelected: (value: TableItem) => void;
    rowUnselected: (value: TableItem) => void;
    selection: (value: TableItem[]) => void;
    'update:busy': (value: boolean) => void;
    'update:sortBy': (value: string) => void;
    'update:sortDesc': (value: boolean) => void;
    sorted: (sortBy: string, isDesc: boolean) => void;
    filtered: (value: TableItem[]) => void;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    small: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    filter: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    dark: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    caption: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    align: {
        type: import("vue").PropType<VerticalAlign>;
        default: undefined;
    };
    variant: {
        type: import("vue").PropType<keyof import("../../types").BaseColorVariant | null>;
        default: undefined;
    };
    items: {
        type: import("vue").PropType<TableItem[]>;
        default: () => never[];
    };
    borderVariant: {
        type: import("vue").PropType<keyof import("../../types").BaseColorVariant | null>;
        default: undefined;
    };
    stacked: {
        type: import("vue").PropType<boolean | Breakpoint>;
        default: boolean;
    };
    busy: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    perPage: {
        type: import("vue").PropType<number>;
        default: undefined;
    };
    bordered: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    borderless: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    captionTop: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    hover: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    responsive: {
        type: import("vue").PropType<boolean | Breakpoint>;
        default: boolean;
    };
    striped: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    stickyHeader: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    fields: {
        type: import("vue").PropType<TableField[]>;
        default: () => never[];
    };
    footClone: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    provider: {
        type: import("vue").PropType<BTableProvider>;
        default: undefined;
    };
    sortCompare: {
        type: import("vue").PropType<BTableSortCompare>;
        default: undefined;
    };
    noProvider: {
        type: import("vue").PropType<NoProviderTypes[]>;
        default: undefined;
    };
    noProviderPaging: {
        type: import("vue").PropType<Booleanish>;
        default: undefined;
    };
    noProviderSorting: {
        type: import("vue").PropType<Booleanish>;
        default: undefined;
    };
    noProviderFiltering: {
        type: import("vue").PropType<Booleanish>;
        default: undefined;
    };
    labelStacked: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    sortBy: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    sortDesc: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    sortInternal: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    selectable: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    stickySelect: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    selectHead: {
        type: import("vue").PropType<string | boolean>;
        default: boolean;
    };
    selectMode: {
        type: import("vue").PropType<"range" | "single" | "multi">;
        default: string;
    };
    selectionVariant: {
        type: import("vue").PropType<keyof import("../../types").BaseColorVariant | null>;
        default: string;
    };
    showEmpty: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    currentPage: {
        type: import("vue").PropType<number>;
        default: number;
    };
    filterable: {
        type: import("vue").PropType<string[]>;
        default: undefined;
    };
    emptyText: {
        type: import("vue").PropType<string>;
        default: string;
    };
    emptyFilteredText: {
        type: import("vue").PropType<string>;
        default: string;
    };
}>> & {
    onHeadClicked?: ((key: import("../../types").LiteralUnion<string>, field: TableField, event: MouseEvent, isFooter: boolean) => any) | undefined;
    onRowClicked?: ((item: TableItem, index: number, event: MouseEvent) => any) | undefined;
    onRowDblClicked?: ((item: TableItem, index: number, event: MouseEvent) => any) | undefined;
    onRowHovered?: ((item: TableItem, index: number, event: MouseEvent) => any) | undefined;
    onRowUnhovered?: ((item: TableItem, index: number, event: MouseEvent) => any) | undefined;
    onRowSelected?: ((value: TableItem) => any) | undefined;
    onRowUnselected?: ((value: TableItem) => any) | undefined;
    onSelection?: ((value: TableItem[]) => any) | undefined;
    "onUpdate:busy"?: ((value: boolean) => any) | undefined;
    "onUpdate:sortBy"?: ((value: string) => any) | undefined;
    "onUpdate:sortDesc"?: ((value: boolean) => any) | undefined;
    onSorted?: ((sortBy: string, isDesc: boolean) => any) | undefined;
    onFiltered?: ((value: TableItem[]) => any) | undefined;
}, {
    small: Booleanish;
    filter: string;
    dark: Booleanish;
    caption: string;
    align: VerticalAlign;
    variant: keyof import("../../types").BaseColorVariant | null;
    items: TableItem[];
    borderVariant: keyof import("../../types").BaseColorVariant | null;
    stacked: boolean | Breakpoint;
    busy: Booleanish;
    perPage: number;
    bordered: Booleanish;
    borderless: Booleanish;
    captionTop: Booleanish;
    hover: Booleanish;
    responsive: boolean | Breakpoint;
    striped: Booleanish;
    stickyHeader: Booleanish;
    fields: TableField[];
    footClone: Booleanish;
    provider: BTableProvider;
    sortCompare: BTableSortCompare;
    noProvider: NoProviderTypes[];
    noProviderPaging: Booleanish;
    noProviderSorting: Booleanish;
    noProviderFiltering: Booleanish;
    labelStacked: boolean;
    sortBy: string;
    sortDesc: Booleanish;
    sortInternal: Booleanish;
    selectable: Booleanish;
    stickySelect: Booleanish;
    selectHead: string | boolean;
    selectMode: "range" | "single" | "multi";
    selectionVariant: keyof import("../../types").BaseColorVariant | null;
    showEmpty: Booleanish;
    currentPage: number;
    filterable: string[];
    emptyText: string;
    emptyFilteredText: string;
}, {}>, Partial<Record<string, (_: {
    label: string | undefined;
    column: import("../../types").LiteralUnion<string>;
    field: TableFieldObject<Record<string, unknown>>;
    isFoot: boolean;
    selectAllRows: () => void;
    clearSelected: () => void;
}) => any>> & Partial<Record<string, (_: {
    value: unknown;
    index: number;
    item: TableItem;
    field: TableFieldObject<Record<string, unknown>>;
    items: TableItem[];
    toggleDetails: () => void;
    detailsShowing: boolean | undefined;
}) => any>> & {
    "thead-top"?(_: {}): any;
    "select-head"?(_: {}): any;
    "sort-icon"?(_: {
        field: TableFieldObject<Record<string, unknown>>;
        sortBy: string | undefined;
        selected: boolean;
        isDesc: boolean;
        direction: string;
    }): any;
    "thead-sub"?(_: {
        key: import("../../types").LiteralUnion<string>;
        label?: string | undefined;
        headerTitle?: string | undefined;
        headerAbbr?: string | undefined;
        class?: any;
        formatter?: string | ((value: unknown, key?: string | undefined, item?: Record<string, unknown> | undefined) => string) | undefined;
        sortable?: boolean | undefined;
        sortKey?: string | undefined;
        sortDirection?: string | undefined;
        sortByFormatted?: boolean | undefined;
        filterByFormatted?: boolean | undefined;
        tdClass?: any;
        thClass?: any;
        thStyle?: import("vue").StyleValue | undefined;
        variant?: keyof import("../../types").BaseColorVariant | null | undefined;
        tdAttr?: import("vue").TdHTMLAttributes | undefined;
        thAttr?: import("vue").ThHTMLAttributes | undefined;
        isRowHeader?: boolean | undefined;
        stickyColumn?: boolean | undefined;
        items: TableFieldObject<Record<string, unknown>>[];
    }): any;
    "select-cell"?(_: {}): any;
    "row-details"?(_: {
        item: TableItem;
        toggleDetails: () => void;
    }): any;
    "table-busy"?(_: {}): any;
    empty?(_: {
        items: TableItem[];
        filtered: boolean;
    }): any;
    "custom-foot"?(_: {
        fields: TableFieldObject<Record<string, unknown>>[];
        items: TableItem[];
        columns: number;
    }): any;
    "table-caption"?(_: {}): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
